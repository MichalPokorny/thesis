- Van Emde-Boas / x/y-fast trie
- B+/B* tree w/ large blocks
- persistence?

- hash tabulky:
	okamzikem zvetseni/zmenseni si jenom naalokovat pamet,
	ale zacit tam kopirovat data az postupne, abych nemusel
	na miste zaplatit O(N)

- Judy array?

- vetsi hodnoty? parametricke na velikosti hodnot?

Testing data

Integrace:
	- Memcache?
	- Python/Ruby built-in hashes?

- jiny programovaci jazyk? (D ma bohatsi compile-time)
- nejake perfektni nebo perfektnejsi hashovani?
- analyzovat pocet cache missu
- analyzovat prumernou velikost table bucketu

- jake jsou idealni meze pro naplnenost hash tabulky?

- multithreading

- MMAP na disk - jsou tam vetsi bloky a vic zabavy
- existuje neco jako "paralelne precti 2 mista v pameti"?
	- z experimentu s nahodnym ctenim to tak vypadalo...

===========

- potrebuju vedet, jakou mam ted rychlost:
	- at je velikost 5 000 000

	=> kolik se provede prumerne cache missu na read?

- potrebuju vedet, jakou mam spotrebu prostoru:
	- at je velikost 5 000 000

	=> kolik prumerne bytu zabiram na jeden par klic-hodnota?

- implicit assertion: 64 B staci na pointer

TODO: one-pass distribution
TODO: scrapegoat tree, AVL tree

TODO: cache-oblivious priority queue

TODO: cache-line-aligned COBT? (neco jako 8-cestny implicitni strom)

specify alignment of ptrs?
align to cache line?

vector ops

TODO: custom allocator
TODO: SIMD hledani v B-stromu

TODO zacit podporovat rank/select? (mohly by se pro to najit nejake aplikace)

TODO: musim delat updaty v poradi post-order

https://bitbucket.org/coriolan/van-emde-boas-layout/src/e553e4612da2c24dfdab1367836facc5a15ba1f4/veb.c?at=default
https://github.com/bcopeland/em_misc/blob/master/cobtree_sh.c
http://www.cs.utexas.edu/~pingali/CS395T/2013fa/lectures/MemoryOptimizations_2013.pdf
http://supertech.csail.mit.edu/cacheObliviousBTree.html

a density control algorithm for doing insertions and deletions in a sequentially ordered file in good worst-case time

TODO: oficialni performance countery v procesoru (ne nutne ty, co exposuje perf)
TODO: pridat do zdrojaku par restrictu

- zalezi na tom, kdyz budu vracet krome prev_key/next_key i pozici, kde ten klic je?
	- mozna bych tim usporil nejaky procesorovy cas pri dalsim hledani

- ofm by mel realokovat, ne alokovat cely novy soubor

cache-sensitive b+ trees
	(increase tree fanout by eliminating pointers)

Opravit: je to 'good worst-case algorithms for inserting and deleting records in
dense sequential files'

prefetching ve vEB?

TODO: alokovat pres huge pages?

cache oblivious b-tree: jde concurrent?

pearson correlation coefficient (for counter-time correlation)

self-organizing heuristics for implicit data structures
implicit data structures for weighted elements

todo: unit test co neprovadi tolik Findu (Findy ovlivnuji splay-like struktury)
TODO: mam vubec v K-splay spravne left-to-right?

TODO: mmap, posix_memalign; pozor na aliasing

To explore:
	- optimal B-tree branching factor
	- speed of RTL, LTR scans in random spots
	- B-tree allocator slowdown (possibly large)
	- real-world dataset (where from?)
	- key/value size
	- 32b ptrs

TODO: aligned memcpy -- muze byt rychlejsi
-fomit-frame-pointer
-ggdb3

porovnani s libdbm?

__restrict (dealias ptrs)

report space usage?

CSB+ trees
http://www.cs.columbia.edu/~kar/software/csb+/readme

TODO: je OK jakym zpusobem vypadaji moje reference na citace?

http://pizzachili.dcc.uchile.cl/texts/nlang/

TLB miss muze byt duvod dvojnasobnych cache missu

source: perf_event_open

Enron e-mails dataset
U.S. census
aws.amazon.com/public-data-sets
wikipedia snapshot
Indiana university Click dataset (HTTP requests)
	^- given a website, find next click on that website
	   key = 'timestamp;website hash'
